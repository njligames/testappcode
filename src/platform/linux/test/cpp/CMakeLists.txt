add_library(SDL_test UNKNOWN IMPORTED)
set_property(TARGET SDL_test APPEND PROPERTY IMPORTED_LOCATION  "${THIRDPARTY_INCLUDE_DIR}/platform/${TARGET_PLATFORM}/libSDL2_test.a")
list(APPEND GAME_LIBRARIES SDL_test)

list(APPEND GAME_LIBRARIES ${CMAKE_DL_LIBS})
list(APPEND GAME_LIBRARIES "sndio")
find_package(OpenGL REQUIRED)
if (OPENGL_FOUND)
    MESSAGE(STATUS "OPENGL_INCLUDE_DIR ${OPENGL_INCLUDE_DIR}")
    MESSAGE(STATUS "OPENGL_LIBRARIES ${OPENGL_LIBRARIES}")
    list(APPEND GAME_LIBRARIES "${OPENGL_LIBRARIES}")
    list(APPEND GAME_INCLUDE_DIRS "${OPENGL_INCLUDE_DIR}")
endif ()

list(APPEND GAME_INCLUDE_DIRS ${GTEST_INCLUDE_DIRS})
list(APPEND GAME_INCLUDE_DIRS ${GMOCK_INCLUDE_DIRS})
list(APPEND GAME_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR})

file(GLOB_RECURSE SRCS ${CMAKE_CURRENT_SOURCE_DIR}/*.c*)
file(GLOB_RECURSE HDRS ${CMAKE_CURRENT_SOURCE_DIR}/*.h)

list(APPEND GAME_SOURCES_TEST ${SRCS} ${HDRS})

add_executable( ${PROJECT_NAME}-test-static ${GAME_SOURCES_TEST} ${TARGET_RESOURCES})
set_property(DIRECTORY ${CMAKE_SOURCE_DIR} PROPERTY XCODE_STARTUP_PROJECT ${PROJECT_NAME}-test-static)

# configure_file("${CMAKEIN_REPO_DIRECTORY}/platform.in/macOS/Info.plist.in" "${CMAKE_BINARY_DIR}/Info.plist")
  # MACOSX_BUNDLE_INFO_PLIST "${CMAKE_BINARY_DIR}/Info.plist"

set_target_properties(
    ${PROJECT_NAME}-test-static PROPERTIES
    # MACOSX_BUNDLE TRUE
    # OUTPUT_NAME "${TARGET_EXECUTABLE_NAME}"
    # MACOSX_BUNDLE_BUNDLE_NAME "${TARGET_EXECUTABLE_NAME}"
    # MACOSX_BUNDLE_INFO_PLIST "${CMAKE_BINARY_DIR}/Info.plist"
    # MACOSX_BUNDLE_BUNDLE_VERSION ${MY_APP_VERSION}
    # MACOSX_BUNDLE_LONG_VERSION_STRING "${TARGET_EXECUTABLE_NAME} v${MY_APP_VERSION}"
    # MACOSX_BUNDLE_SHORT_VERSION_STRING "${MY_APP_VERSION}"
    # MACOSX_BUNDLE_COPYRIGHT "(C) 2020 NJLIGames LLC."
    # MACOSX_RPATH TRUE
    # XCODE_ATTRIBUTE_LD_RUNPATH_SEARCH_PATHS "@loader_path/Libraries"
    # RESOURCE "${TARGET_RESOURCES}"
    # XCODE_ATTRIBUTE_ENABLE_HARDENED_RUNTIME TRUE
    # XCODE_ATTRIBUTE_EXECUTABLE_NAME "${TARGET_EXECUTABLE_NAME}"
    INCLUDE_DIRECTORIES "${GAME_INCLUDE_DIRS}"
    # XCODE_ATTRIBUTE_PRODUCT_BUNDLE_IDENTIFIER "$ENV{XCODE_PRODUCT_BUNDLE_IDENTIFIER}"
    # XCODE_ATTRIBUTE_ASSETCATALOG_COMPILER_APPICON_NAME "AppIcon"
    # XCODE_ATTRIBUTE_CLANG_ENABLE_OBJC_ARC YES
    # XCODE_ATTRIBUTE_ASSETCATALOG_COMPILER_LAUNCHIMAGE_NAME "LaunchImage"
    # XCODE_ATTRIBUTE_ENABLE_BITCODE NO
    # XCODE_ATTRIBUTE_INSTALL_PATH "/Applications"
    # XCODE_ATTRIBUTE_PRODUCT_NAME ${TARGET_EXECUTABLE_NAME}
    )

list(APPEND INSTALL_LIBS ${PROJECT_NAME}-test-static)

target_compile_definitions( ${PROJECT_NAME}-test-static PUBLIC ${TARGET_DEFINITIONS})
target_link_libraries( ${PROJECT_NAME}-test-static ${PROJECT_NAME}-static gtest gmock_main ${GAME_LIBRARIES})

install(TARGETS ${PROJECT_NAME}-test-static EXPORT ${PROJECT_NAME}Targets
    RUNTIME DESTINATION bin)

add_test(NAME ${PROJECT_NAME}-test-static COMMAND ${PROJECT_NAME}-test-static)

set(CLANG_FORMAT_BIN "/usr/local/bin/clang-format" CACHE STRING "use: `brew install clang-format` to install")
add_custom_target(
    ${PROJECT_NAME}-clang-format-test
    COMMAND ${CLANG_FORMAT_BIN} -style=file -i ${GAME_SOURCES_TEST} -verbose
    SOURCES
    "${CMAKE_SOURCE_DIR}/.clang-format"
    )
